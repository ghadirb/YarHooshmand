package org.yarhooshmand.smartv3.ui

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.platform.LocalContext
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import org.yarhooshmand.smartv3.models.ModelManager
import org.yarhooshmand.smartv3.keys.KeysManager
import android.widget.Toast
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items

@Composable
fun SettingsScreen() {
    val ctx = LocalContext.current
    var keysTxt by remember { mutableStateOf("") }
    var simple by remember { mutableStateOf(ModelManager.isSimpleMode(ctx)) }
    var listen by remember { mutableStateOf(ModelManager.isListenAfterAlarm(ctx)) }
    var testing by remember { mutableStateOf(false) }
    var keyStatuses by remember { mutableStateOf(listOf<Pair<String,Boolean>>()) }
    val scope = rememberCoroutineScope()
    var activeModel by remember { mutableStateOf(ModelManager.firstEnabled() ?: "(هیچ)") }

    Column(Modifier.fillMaxSize().padding(16.dp)) {
        Text("تنظیمات", style = MaterialTheme.typography.titleLarge)
        Spacer(Modifier.height(12.dp))
        OutlinedTextField(
            value = keysTxt,
            onValueChange = { keysTxt = it },
            label = { Text("کلیدهای API (هر خط یک کلید)") },
            modifier = Modifier.fillMaxWidth().height(160.dp)
        )
        Spacer(Modifier.height(8.dp))
        Row {
            Button(onClick = {
                val list = keysTxt.split('\n').map { it.trim() }.filter { it.isNotEmpty() }
                KeysManager.setKeys(ctx, list)
                Toast.makeText(ctx, "کلیدها ذخیره شد", Toast.LENGTH_SHORT).show()
            }) { Text("ذخیره کلیدها") }
            Spacer(Modifier.width(8.dp))
            Button(onClick = {
                // Refresh from Drive and re-init
                scope.launch(Dispatchers.IO) {
                    KeysManager.init(ctx)
                    // run validation
                    val sp = mutableListOf<Pair<String,Boolean>>()
                    val saved = ctx.getSharedPreferences("yar_keys_prefs",0).getString("api_keys","") ?: ""
                    val list = if (saved.isBlank()) listOf<String>() else saved.split('|')
                    for (k in list) {
                        val ok = KeysManager.validateKey(k)
                        sp.add(Pair(k, ok))
                    }
                    keyStatuses = sp
                    activeModel = ModelManager.firstEnabled() ?: "(هیچ)"
                }
            }) { Text("Refresh from Drive") }
            Spacer(Modifier.width(8.dp))
            Button(onClick = {
                // validate keys
                testing = true
                scope.launch(Dispatchers.IO) {
                    val sp = mutableListOf<Pair<String,Boolean>>()
                    val saved = ctx.getSharedPreferences("yar_keys_prefs",0).getString("api_keys","") ?: ""
                    val list = if (saved.isBlank()) listOf<String>() else saved.split('|')
                    for (k in list) {
                        val ok = KeysManager.validateKey(k)
                        sp.add(Pair(k, ok))
                    }
                    keyStatuses = sp
                    testing = false
                }
            }) { Text(if (testing) "در حال تست..." else "Test Keys") }
        }

        Spacer(Modifier.height(12.dp))
        Text("مدل فعال: $activeModel", style = MaterialTheme.typography.bodyLarge)
        Spacer(Modifier.height(8.dp))
        Text("وضعیت کلیدها:") 
        LazyColumn(Modifier.fillMaxWidth().height(160.dp)) {
            items(keyStatuses) { kv ->
                Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
                    Text(kv.first, maxLines = 1)
                    Text(if (kv.second) "OK" else "BAD")
                }
            }
        }
        Spacer(Modifier.height(12.dp))
        Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
            Text("حالت ساده")
            Switch(checked = simple, onCheckedChange = { v -> simple = v; ModelManager.setSimpleMode(ctx, v) })
        }
        Spacer(Modifier.height(8.dp))
        Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
            Text("شنود کوتاه‌مدت بعد از یادآوری")
            Switch(checked = listen, onCheckedChange = { v -> listen = v; ModelManager.setListenAfterAlarm(ctx, v) })
        }
    }
    Spacer(Modifier.height(12.dp))
    // Theme toggle
    val themePref = org.yarhooshmand.smartv3.utils.ThemePref
    var darkMode by remember { mutableStateOf(themePref.isDark(ctx)) }
    Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
        Text("حالت تاریک / روشن")
        Switch(checked = darkMode, onCheckedChange = { v ->
            darkMode = v
            themePref.setDark(ctx, v)
        })
    }
    Spacer(Modifier.height(12.dp))
    // Backup export/import
    val launcher = rememberLauncherForActivityResult(contract = ActivityResultContracts.GetContent()) { uri ->
        if (uri != null) {
            scope.launch(Dispatchers.IO) {
                val ok = org.yarhooshmand.smartv3.utils.BackupUtils.importRemindersFromUri(ctx, uri)
                launch(Dispatchers.Main) {
                    Toast.makeText(ctx, if (ok) "بک‌آپ وارد شد" else "خطا در وارد کردن بک‌آپ", Toast.LENGTH_LONG).show()
                }
            }
        }
    }
    Row {
        Button(onClick = {
            scope.launch(Dispatchers.IO) {
                val path = org.yarhooshmand.smartv3.utils.BackupUtils.exportRemindersToFile(ctx)
                launch(Dispatchers.Main) {
                    if (path != null) Toast.makeText(ctx, "بک‌آپ در: " + path, Toast.LENGTH_LONG).show()
                    else Toast.makeText(ctx, "خطا در گرفتن بک‌آپ", Toast.LENGTH_LONG).show()
                }
            }
        }) { Text("Export reminders") }
        Spacer(Modifier.width(8.dp))
        Button(onClick = {
            // pick file
            launcher.launch("application/json")
        }) { Text("Import reminders") }
    }
    Spacer(Modifier.height(12.dp))

}

    
    // --- SMS section ---
    Divider()
    Text("پیامک یادآورها", style = MaterialTheme.typography.titleMedium)
    val ctxLocal = LocalContext.current
    var smsMaster by remember { mutableStateOf(org.yarhooshmand.smartv3.utils.SmsPrefs.isMasterEnabled(ctxLocal)) }
    Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
        Text("فعال‌سازی ارسال پیامک (اختیاری)")
        Switch(checked = smsMaster, onCheckedChange = {
            smsMaster = it
            org.yarhooshmand.smartv3.utils.SmsPrefs.setMasterEnabled(ctxLocal, it)
        })
    }
    var smsNumber by remember { mutableStateOf(org.yarhooshmand.smartv3.utils.SmsPrefs.getDefaultNumber(ctxLocal)) }
    OutlinedTextField(value = smsNumber, onValueChange = { smsNumber = it }, label = { Text("شماره پیش‌فرض") }, singleLine = true, modifier = Modifier.fillMaxWidth())
    Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.End) {
        Button(onClick = { org.yarhooshmand.smartv3.utils.SmsPrefs.setDefaultNumber(ctxLocal, smsNumber.trim()) }) {
            Text("ذخیره شماره")
        }
    }
    
